===============================================================================
  LEGAL
===============================================================================

liblighashtable is Copyright (C) 2008  Daniel Richman

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For a full copy of the GNU General Public License, 
see <http://www.gnu.org/licenses/>.

liblighashtable includes sections from lookup3.c, 
by Bob Jenkins, May 2006, Public Domain.
see http://burtleburtle.net/bob/c/lookup3.c for the original.

===============================================================================
  AUTHOR & PROJECT URL
===============================================================================

liblighashtable was written by: 
  Daniel Richman <main@danielrichman.co.uk>

Project Homepage: 
  http://www.danielrichman.co.uk/projects/liblighashtable

GitHub/Source code project page
  http://github.com/danielrichman/liblighashtable

===============================================================================
  USAGE / LIBRARY REFERENCE
===============================================================================

Creating a hashtable

  int hashtable_new(struct hashtable *ht);

    Create a new hashtable, allocating memory for the table itself, using all
    the default settings, which is what you probably want.

  typedef uint32_t  ht_size_t;
  typedef uint8_t   ht_size_p_t;
  typedef ht_size_t ht_hash_t;

  typedef ht_hash_t (*hash_function)(const void *key, size_t length);

  extern const struct hashtablesettings hashtable_defaults;

  struct hashtablesettings
  {
    ht_size_p_t size_initial;         /* default:  3 */
    ht_size_p_t size_maximum;         /* default:  4 */
    ht_size_p_t size_extend;          /* default:  1 */
    ht_size_p_t size_extend_trigger;  /* default:  0 */
    hash_function hashfunction;       /* default: Bob Jenkins' lookup3 */
  };

  int hashtable_new_custom(struct hashtable *ht, 
                           const struct hashtablesettings *s);

    Creates a new hashtable, validating the settings provided first.

    A hashtable in this library is always a size that is a power of 2.
    Anything of ht_size_p_t (size_power) specifies the size of a table
    as being 2 to the power of ht_size_p_t. (Eg. size_initial = 3 would
    mean that the table starts at size 8).

    If there any collisions in the hashes, a linked list will be created
    in that 'slot'.

    size_extend specifies by what power of 2 the table should be enlarged
    when the number of items reaches 2 to the power of 
    (table_size + size_extend_trigger).

    The default values mean that a table will be created with 8 slots,
    therefore the last three bits of the hash will be used to decide an item's
    location in the table. Once 8 items have been entered, the table size will
    be doubled.

    None of these values may be greater than 31.

    If the table becomes so large that size_maximum is reached or it is not
    possible to allocate more memory for the table, then items may still be 
    inserted, or "set", adding to the linked list in each slot.

Setting keys in the hashtable.

  int hashtable_set(struct hashtable *ht, const void *key, size_t keylen, 
                    void *data);

    hashtable_set associates whatever is pointed to by *data to the key 
    provided. data can point to anything you wish; a struct, a char-array - 
    it's a void * for the reason that any lump of stuff can be associated 
    with it.

    No two keys may be identical, see the return value HASHTABLE_DUPLICATE
    below.

    Furthermore, see the return values section below for information on the
    other two return codes of this function, HASHTABLE_OUT_OF_MEMORY and
    HASHTABLE_SUCCESS_YET_OUT_OF_MEMORY.

Retrieving keys form the hashtable

  int hashtable_get(struct hashtable *ht, const void *key, size_t keylen, 
                    void **data);

    Searches for an item in the hashtable under the key specified. If found,
    it will assign item's "data" varialbe (see hashtable_set) to *data.

  int hashtable_get_item(struct hashtable *ht, const void *key, size_t keylen,
                         struct hashtableitem **item);

    Similar to hashtable_get, however, instead of providing you with the
    contents of the items 'data' variable, it gives you a pointer to the item
    itself. This is useful (more efficient) if you wish to perform multiple 
    operations on one key, for example, 'getting' it, and then 'updating' it, 
    without performing the search through the hashtable twice.

  int hashtable_get_item_data(struct hashtable *ht, 
                              struct hashtableitem *item, 
                              void **data);

Updating an items *data

  int hashtable_update_item(struct hashtable *ht, struct hashtableitem *item, 
                            void **data);
  int hashtable_update(struct hashtable *ht, const void *key, size_t keylen, 
                       void *data);

    hashtable_update updates the item associated with key's data variable to
    'data'. hashtable_update_item takes a pointer given to you by 
    hashtable_get_item and performs the same operation as hashtable_update,
    In order to be compatible with potential changes to the internals behind
    hashtable_update_item, you should treat it as if it were a function.

Removing an item from the table

  int hashtable_unset_item(struct hashtable *ht, struct hashtableitem *item);
  int hashtable_unset(struct hashtable *ht, const void *key, size_t keylen);

    This will free the memory allocated for the item, but will not touch or 
    free the target of the item's data pointer.

Destroying the hashtable entirely

  void hashtable_delete(struct hashtable *ht);

    This also 'unsets' any items still in the table
    (see hashtable_unset).

Return values

  All functions, except for hashtable_delete, return one of these values:

    #define HASHTABLE_SUCCESS                    0
    #define HASHTABLE_SUCCESS_YET_OUT_OF_MEMORY  1
    #define HASHTABLE_OUT_OF_MEMORY              2
    #define HASHTABLE_KEY_NOT_FOUND              3
    #define HASHTABLE_INVALID_ARG                4
    #define HASHTABLE_DUPLICATE                  5

  The following function can be used to look up a string associated with this
  number, in a similar way to strerror for stdio.h

    const char *hashtable_strerror(int hterror);

  NB:

  If a hashtable_new returns HASHTABLE_OUT_OF_MEMORY, no memory will have been
  allocated since a call to malloc failed. 

  If a hashtable_set call returns HASHTABLE_OUT_OF_MEMORY, it means that it 
  was unable to allocate memory for the item struct itself. The item will not
  have been set but nor will the table have been destroyed, and you can 
  continue to hashtable_get. If you wish to bail out and exit, you must 
  hashtable_delete.

  If the hash table's settings suggest that the table should be enlarged when
  hashtable_set is called, and it cannot be enlarged due to a failed call to
  malloc / out of memory, yet it still succeeded in inserting the item, 
  this function will return HASHTABLE_SUCCESS_YET_OUT_OF_MEMORY.

  HASHTABLE_INVALID_ARG refers to any ht_size_p_t.

===============================================================================
  INSTALLATION
===============================================================================

The Makefile will compile configure.c to detect endian-ness and then will 
compile and create either a shared object, a static library or a test binary.

$ make -B OPT=true liblighashtable.so
$ make -B OPT=true liblighashtable.a
$ make -B OPT=true ht_test

Building the target 'test' will have make also run the test program.
$ make -B OPT=true test

Building 'all' creates both static & shared libraries, a test binary, and 
runs it
$ make -B OPT=true all

If the test fails for whatever reason, it will exit with a non zero code and
this will cause make to print an error.

The following other options are availiable:

Print a large amount of debugging information from the test program
$ make -B DEBUG=true test

Compile with -pg and a large number of test program repetitions
$ make -B BENCHMARK=true OPT=true ht_test
$ time ./ht_test
$ gprof ht_test

Note that compiling BENCHMARK=true without OPT=true will produce interestingly
differnet results - the introduction of -O2 dramatically improves this 
library's performance.

===============================================================================
